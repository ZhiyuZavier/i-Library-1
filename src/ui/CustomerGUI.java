package ui;

import control.LoginUserManager;
import java.awt.HeadlessException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import user.Customer;

/**
 *
 * @author leiz03
 */
public class CustomerGUI extends javax.swing.JFrame {

    private long startTime = 0;
    private long endTime = 0;
    private String startTimeStr = "";
    private String endTimeStr = "";
    DBConnection db = new DBConnection();
    ResultSet rs = null;
    PreparedStatement pst = null;

    /**
     * Creates new form NewApplication
     */
    public CustomerGUI() {

        initComponents();
        this.setLocationRelativeTo(null);
        Display timedisplay = new Display();
        timedisplay.start();
        startTime = System.currentTimeMillis();
        startTimeStr = currentTime();
        shouldReturnBook();
    }

    public String currentDate() {
        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        String currentDate = (month + 1) + "/" + day + "/" + year;
        return currentDate;
    }

    public String currentTime() {
        Calendar cal = new GregorianCalendar();
        int second = cal.get(Calendar.SECOND);
        int minute = cal.get(Calendar.MINUTE);
        int hour = cal.get(Calendar.HOUR);
        String currentTime = hour + ":" + minute + ":" + second;
        return currentTime;
    }

    private void shouldReturnBook() {
        db.openConn();
        try {
            String sqldays = "select * from record where userID="
                    + LoginUserManager.getInstance().getCurrentUser().getUserID()
                    + " and julianday('now') - julianday(borrowDate)> 21"
                    + " and returnDate = ''";
            pst = db.conn.prepareStatement(sqldays);
            rs = pst.executeQuery();
            if (rs.next()) {
                JOptionPane.showMessageDialog(null, "You have some books beyond expiry date!");
            }
            rs.close();

        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        db.closeConn();
    }

    public class Display extends Thread {

        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");

        @Override
        public void run() {
            while (true) {

                currentTime.setText(sdf.format(new Date()));
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchButton = new javax.swing.JButton();
        bookInfoTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        myAccountButton = new javax.swing.JButton();
        logoffButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        currentTime = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Customer Main Menu");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        bookInfoTextField.setText("Please input key words: title, author(s), publisher, categories...");

        myAccountButton.setText("My Account");
        myAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myAccountButtonActionPerformed(evt);
            }
        });

        logoffButton.setText("Logoff");
        logoffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoffButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Current Time:");

        currentTime.setEditable(false);
        currentTime.setText("jTextField1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(myAccountButton)
                .addGap(132, 132, 132)
                .addComponent(logoffButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(bookInfoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(204, 204, 204)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 63, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(bookInfoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86)
                .addComponent(searchButton)
                .addGap(75, 75, 75)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(myAccountButton)
                    .addComponent(logoffButton))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logoffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoffButtonActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            db.openConn();
            pst = db.conn.prepareStatement("select * from loginTime");
            rs = pst.executeQuery();

            // need to take last recordID
            int lastID = 0;
            while (rs.next()) {
                lastID = Integer.parseInt(rs.getString("recordID"));
            }

            rs.close();

            endTime = System.currentTimeMillis();
            endTimeStr = currentTime();
            double duration = (endTime - startTime) / 1000;

            int loginHour = (int) Math.floor(duration/3600);
            int loginMinute = (int) Math.floor(duration/60) - loginHour * 60;
            int loginSecond = (int) (duration - loginMinute * 60);

            pst = db.conn.prepareStatement("INSERT INTO loginTime (recordID,userID,loginTime,logoutTime,onlineTime)"
                    + "VALUES(?,?,?,?,?)");
            pst.setInt(1, lastID + 1);
            pst.setInt(2, LoginUserManager.getInstance().getCurrentUser().getUserID());
            pst.setString(3, startTimeStr);
            pst.setString(4, endTimeStr);
            pst.setString(5, loginHour + " h " + loginMinute + " m " + loginSecond + " s");
            pst.executeUpdate();
            db.closeConn();
        } catch (SQLException ex) {
            Logger.getLogger(CustomerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        this.dispose();
        LoginGUI loginGui = new LoginGUI();
        loginGui.setVisible(true);
    }//GEN-LAST:event_logoffButtonActionPerformed

    private void myAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myAccountButtonActionPerformed
        // TODO add your handling code here:
        MyAccount myAccount = new MyAccount();
        myAccount.setVisible(true);
        myAccount.Update_table(String.valueOf(LoginUserManager.getInstance().getCurrentUser().getUserID()));
    }//GEN-LAST:event_myAccountButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        DBConnection db = new DBConnection();
        db.openConn();
        // Customer customer = new Customer();
        // customer.searchBook(bookInfoTextField.getText());
        SearchResults sResults = new SearchResults();
        sResults.setVisible(true);
        sResults.Update_table(bookInfoTextField.getText());
        db.closeConn();
    }// GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
		/*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase
         * /tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerGUI.class.getName())
                    .log(java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bookInfoTextField;
    private javax.swing.JTextField currentTime;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton logoffButton;
    private javax.swing.JButton myAccountButton;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables

}
