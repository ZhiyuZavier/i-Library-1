package ui;

import java.awt.HeadlessException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;

import net.proteanit.sql.DbUtils;

/**
 *
 * @author leiz03
 */
public class BookGUI_ForReceptionist extends javax.swing.JFrame {

    DBConnection db = new DBConnection();
    ResultSet rs = null;
    PreparedStatement pst = null;

    /**
     * Creates new form BookGUI
     */
    public BookGUI_ForReceptionist() {
        db.openConn();
        setTitle("Manage books");
        initComponents();
        this.setLocationRelativeTo(null);
        Update_table();
        Fillcombo();
        
    }

    private void Update_table() {
        try {
            
            String sql = "select * from Book";
            pst = db.conn.prepareStatement(sql);
            rs = pst.executeQuery();
            table_BookInfo.setModel(DbUtils.resultSetToTableModel(rs));
           
        } catch (Exception e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void Update_table(String subString) {
        try {
            
            String sql = "select * from Book where title like '%" + subString
                    + "%'" + "OR publisher like '%" + subString + "%'"
                    + "OR author like '%" + subString + "%'"
                    + "OR categories like '%" + subString + "%'"
                    + "OR bookStatus like '%" + subString + "%'"
                    + "OR categories like '%" + subString + "%'"
                    + "OR publishYear like '%" + subString + "%'"
                    + "OR description like '%" + subString + "%'"
                    + "OR shopName like '%" + subString + "%'";
			// String sql =
            // "select * from Book where bookStatus like '%?%'  OR  publishYear like '%?%' OR title like '%?%'  OR  publisher  like '%?%'  OR description like '%?%' OR  categories like '%?%'  OR shopName like '%?%'  OR author like '%?%' ";
            pst = db.conn.prepareStatement(sql);
			// for (int i = 1; i < 9; i++) {
            // pst.setString(i, subString);
            // }
            rs = pst.executeQuery();
            table_BookInfo.setModel(DbUtils.resultSetToTableModel(rs));
          
        } catch (Exception e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);

        }

    }

    private void Fillcombo() {
        try {
        
            String sql = "select * from Book";
            pst = db.conn.prepareStatement(sql);
            rs = pst.executeQuery();

            while (rs.next()) {
                String bookid = rs.getString("bookID");
                comboBox1.addItem(bookid);
            }

       
        } catch (Exception e) {
            // TODO: handle exception
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table_BookInfo = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnReturn = new javax.swing.JButton();
        btnBorrow = new javax.swing.JButton();
        comboBox1 = new javax.swing.JComboBox();
        txtCusID = new javax.swing.JTextField();
        txtborrowerID = new javax.swing.JTextField();
        btnLost = new javax.swing.JButton();
        btnTakeFine = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtAuthor = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtBookID = new javax.swing.JTextField();
        txtCategory = new javax.swing.JTextField();
        txtTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtPublisher = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        table_BookInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table_BookInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_BookInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table_BookInfo);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Commands", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Agency FB", 1, 18), new java.awt.Color(0, 0, 255))); // NOI18N

        btnReturn.setText("Return In");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnBorrow.setText("Borrow Out");
        btnBorrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrowActionPerformed(evt);
            }
        });

        comboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select A Book" }));
        comboBox1.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                comboBox1PopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        txtCusID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCusIDActionPerformed(evt);
            }
        });

        btnLost.setText("Lost");
        btnLost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLostActionPerformed(evt);
            }
        });

        btnTakeFine.setText("Take Fine");
        btnTakeFine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTakeFineActionPerformed(evt);
            }
        });

        jLabel6.setText("Customer's ID:");

        jLabel7.setText("Borrower's ID:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBorrow, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCusID)
                                    .addComponent(txtborrowerID)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReturn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTakeFine, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnBorrow, btnLost, btnReturn, btnTakeFine});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(btnBorrow)
                .addGap(4, 4, 4)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCusID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btnReturn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(1, 1, 1)
                .addComponent(txtborrowerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLost)
                .addGap(18, 18, 18)
                .addComponent(btnTakeFine)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Book Info", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Agency FB", 1, 18), new java.awt.Color(204, 0, 0))); // NOI18N

        jLabel5.setText("publisher");

        txtAuthor.setEnabled(false);

        jLabel4.setText("author");

        txtBookID.setEnabled(false);

        txtCategory.setEnabled(false);

        txtTitle.setEnabled(false);

        jLabel2.setText("title");

        jLabel3.setText("category");

        txtPublisher.setEnabled(false);

        jLabel1.setText("book ID");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCategory, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTitle)
                            .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Please input key words: title, author(s), publisher, category, etc", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Agency FB", 0, 18), new java.awt.Color(153, 0, 153))); // NOI18N

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnBack.setText("Back To Main Menu");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 763, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(btnBack)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean isNum(String cusID) {
        try {
            Integer.parseInt(cusID);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    public int numBorrowed(String cusID) {
        int num = 0;
        try {
          
            String sql = "select count(*) from record where userID =" + cusID
                    + " and returnDate=''";
            pst = db.conn.prepareStatement(sql);
            rs = pst.executeQuery();
            num = rs.getInt("count(*)");

        } catch (SQLException ex) {
            Logger.getLogger(BookGUI_ForReceptionist.class.getName()).log(Level.SEVERE, null, ex);
        }
        return num;
    }

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        try {
            
            String bookid = txtBookID.getText();
            String value1 = txtTitle.getText();
            String value2 = txtAuthor.getText();
            String value3 = txtCategory.getText();
            String value4 = txtPublisher.getText();
            String cusID = txtborrowerID.getText();
            SimpleDateFormat myFormat = new SimpleDateFormat("MM/dd/yyyy");
            if (cusID.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please input borrower's ID!");
            } else if (!isNum(cusID)) {
                JOptionPane.showMessageDialog(null, "Please input a number!");
            } else if (!db.conn.prepareStatement("select * from record where userID =" + cusID
                    + " and returnDate = ''").executeQuery().next()) {
                JOptionPane.showMessageDialog(null, "This user didn't borrow any book!");
            } else if (bookid.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please choose a book!");
            } else if (!db.conn.prepareStatement("select * from record where userID =" + cusID
                    + " and bookID =" + bookid).executeQuery().next()) {
                JOptionPane.showMessageDialog(null, "This user didn't borrow this book!");
            } else if (!db.conn.prepareStatement("select * from record where userID =" + cusID
                    + " and bookID = " + bookid + " and returnDate = ''").executeQuery().next()) {
                JOptionPane.showMessageDialog(null, "This book has been returned!");
            } 
            else {

                String sql = "update Book set bookStatus = 'available' where bookID = '"
                        + bookid + "' ";
                pst = db.conn.prepareStatement(sql);
                pst.executeUpdate();
                
                String sqlRecID = "select recordID from record where bookID=" + bookid +" and userID ="+cusID+" and returnDate=''";
                pst = db.conn.prepareStatement(sqlRecID);
                rs = pst.executeQuery();
                int recID = rs.getInt("recordID");
                System.out.println(recID);
                
                String sqlUp = "update record set returnDate = '" + currentDate() + "' where bookID ="
                        + bookid + " and userID = " + cusID + " and recordID ="+recID;
                pst = db.conn.prepareStatement(sqlUp);
                pst.executeUpdate();
  
                JOptionPane.showMessageDialog(null, "Return in successfully");
                String sqldays = "select expiryDate from record where bookID='"
                        + bookid + "' and userID = '" + cusID + "' and recordID="+recID;
                pst = db.conn.prepareStatement(sqldays);
                rs = pst.executeQuery();
                String expiryDate = "";
                if (rs.next()) {
                    expiryDate = rs.getString("expiryDate");
                }
                rs.close();
                java.util.Date date1 = myFormat.parse(currentDate());
                java.util.Date date2 = myFormat.parse(expiryDate);
                long diff = date1.getTime() - date2.getTime();
                Double fine = (double)0.6 * TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
                if (fine > 0) {

                    JOptionPane.showMessageDialog(null, "A fine of " + fine + " dollor must be paid by this customer!");
                    String sqlFine = "update record set Fine = '" + fine + "',Paid ='No' where bookID = '"
                            + bookid + "' and userID = '" + cusID + "' and recordID="+recID;
                    pst = db.conn.prepareStatement(sqlFine);
                    pst.executeUpdate();
                    
                }
                System.out.println(fine);
            }
        } catch (HeadlessException | SQLException | ParseException e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);
        }
     
        Update_table();


    }//GEN-LAST:event_btnReturnActionPerformed

    private void txtCusIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCusIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCusIDActionPerformed

    private void btnLostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLostActionPerformed
        // TODO add your handling code here:
        try {
            
            String bookid = txtBookID.getText();
            String value1 = txtTitle.getText();
            String value2 = txtAuthor.getText();
            String value3 = txtCategory.getText();
            String value4 = txtPublisher.getText();
            String cusID = txtborrowerID.getText();

            if (cusID.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please input borrower's ID!");
            } else if (!isNum(cusID)) {
                JOptionPane.showMessageDialog(null, "Please input a number!");
            } else if (!db.conn.prepareStatement("select * from record where userID =" + cusID
                    + " and returnDate = ''").executeQuery().next()) {
                JOptionPane.showMessageDialog(null, "This user didn't borrow any book!");
            } else if (bookid.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please choose a book!");
            } else if (!db.conn.prepareStatement("select * from record where userID =" + cusID
                    + " and bookID =" + bookid).executeQuery().next()) {
                JOptionPane.showMessageDialog(null, "This user didn't borrow this book!");
            } else if (!db.conn.prepareStatement("select * from record where userID =" + cusID
                    + " and bookID = " + bookid + " and returnDate = ''").executeQuery().next()) {
                JOptionPane.showMessageDialog(null, "This book has been returned!");
            } else {

                String sql = "update Book set title = '" + value1 + "' ,author = '"
                        + value2 + "' ,categories = '" + value3
                        + "' ,publisher = '" + value4 + "' ,bookStatus = 'Lost' where bookID = '"
                        + bookid + "' ";
                pst = db.conn.prepareStatement(sql);
                pst.executeUpdate();
                String sqlUp = "update record set returnDate = 'Lost'  where bookID = '"
                        + bookid + "' and userID = '" + cusID + "'";
                pst = db.conn.prepareStatement(sqlUp);
                pst.executeUpdate();
                // pst.execute();
                JOptionPane.showMessageDialog(null, "Book lost!");
                String sqldays = "select * from book where bookID='" + bookid + "'";
                pst = db.conn.prepareStatement(sqldays);
                rs = pst.executeQuery();
                double fine = 0;
                if (rs.next()) {
                    fine = rs.getDouble("price");
                }
                rs.close();
                JOptionPane.showMessageDialog(null, "A fine of " + fine + " dollor must be paid by this customer!");
                String sqlFine = "update record set Fine = '" + fine + "',Paid = '" + "No" + "'where bookID = '"
                        + bookid + "' and userID = '" + cusID + "'";
                pst = db.conn.prepareStatement(sqlFine);
                pst.executeUpdate();

            }
        } catch (HeadlessException | SQLException e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);
        }
      
        Update_table();
    }//GEN-LAST:event_btnLostActionPerformed

    private void btnTakeFineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTakeFineActionPerformed
        // TODO add your handling code here:
        try {

            String cusID = txtborrowerID.getText();

            if (cusID.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please input borrower's ID!");
            } else {
              

                // pst.execute();
                String sql = "select sum(Fine) from record where userID = " + cusID + " and Paid!='Yes' and Fine!=''";
                pst = db.conn.prepareStatement(sql);
                rs = pst.executeQuery();

                if (rs.getString("sum(Fine)") == null) {
                    JOptionPane.showMessageDialog(null, "This user has no any fine to pay!");

                } else {

                    double fineSum = Double.parseDouble(rs.getString("sum(Fine)"));
                    rs.close();

                    JOptionPane.showMessageDialog(null, "Total fine of " + fineSum + " dollor must be paid by this customer!");
                    int option1 = JOptionPane.showConfirmDialog(null,
                            "Would you like to take all fine?",
                            "Confirm to take all",
                            JOptionPane.YES_NO_OPTION);

                    String sqlFine;
                    if (option1 == JOptionPane.YES_OPTION) {
                        sqlFine = "update record set Paid = 'Yes' where userID = " + cusID + " and Fine is not null and Fine!=''";
                        pst = db.conn.prepareStatement(sqlFine);
                        pst.executeUpdate();
                        int option2 = JOptionPane.showConfirmDialog(null,
                                "Would you like to print receipt?",
                                "Confirm to print",
                                JOptionPane.YES_NO_OPTION);
                        if (option2 == JOptionPane.YES_OPTION) {
                            String textPrint = "";
                            textPrint += "###########------ Fine Receipt ------###########\n";
                            textPrint += "###########-------------------------------###########\n";
                            textPrint += "\n";
                            textPrint += "#  Pay Date: " + currentDate() + "\n";
                            textPrint += "#  Customer ID: " + cusID + "\n";
                            textPrint += "#  Fine: " + fineSum + " dollor\n";
                            PrintFineReceipt printFine = new PrintFineReceipt();
                            printFine.setPrintStr(textPrint);
                            printFine.setVisible(true);

                        }

                     
                    }
                }
            }

        } catch (HeadlessException | SQLException e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);
        }

        Update_table();
    }//GEN-LAST:event_btnTakeFineActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
            db.closeConn();
        this.dispose();
        ReceptionistGUI gui = new ReceptionistGUI();
        gui.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        Update_table(txtSearch.getText());

        try {
       
            String sql = "select * from Book where title = ?";
            pst = db.conn.prepareStatement(sql);
            pst.setString(1, txtSearch.getText());
            rs = pst.executeQuery();
            if (rs.next()) {
                String add0 = rs.getString("bookID");
                txtBookID.setText(add0);
                String add1 = rs.getString("title");
                txtTitle.setText(add1);
                String add2 = rs.getString("categories");
                txtCategory.setText(add2);
                String add3 = rs.getString("author");
                txtAuthor.setText(add3);
                String add4 = rs.getString("publisher");
                txtPublisher.setText(add4);
            }
       
        } catch (Exception e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);
        }

        try {
            
            String sql = "select * from Book where categories = ?";
            pst = db.conn.prepareStatement(sql);
            pst.setString(1, txtSearch.getText());
            rs = pst.executeQuery();
            if (rs.next()) {
                String add0 = rs.getString("bookID");
                txtBookID.setText(add0);
                String add1 = rs.getString("title");
                txtTitle.setText(add1);
                String add2 = rs.getString("categories");
                txtCategory.setText(add2);
                String add3 = rs.getString("author");
                txtAuthor.setText(add3);
                String add4 = rs.getString("publisher");
                txtPublisher.setText(add4);
            }
      
        } catch (Exception e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);
        }

        try {
         
            String sql = "select * from Book where author = ?";
            pst = db.conn.prepareStatement(sql);
            pst.setString(1, txtSearch.getText());
            rs = pst.executeQuery();
            if (rs.next()) {
                String add0 = rs.getString("bookID");
                txtBookID.setText(add0);
                String add1 = rs.getString("title");
                txtTitle.setText(add1);
                String add2 = rs.getString("categories");
                txtCategory.setText(add2);
                String add3 = rs.getString("author");
                txtAuthor.setText(add3);
                String add4 = rs.getString("publisher");
                txtPublisher.setText(add4);
            }
       
        } catch (Exception e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);
        }

        try {
          
            String sql = "select * from Book where publisher = ?";
            pst = db.conn.prepareStatement(sql);
            pst.setString(1, txtSearch.getText());
            rs = pst.executeQuery();
            if (rs.next()) {
                String add0 = rs.getString("bookID");
                txtBookID.setText(add0);
                String add1 = rs.getString("title");
                txtTitle.setText(add1);
                String add2 = rs.getString("categories");
                txtCategory.setText(add2);
                String add3 = rs.getString("author");
                txtAuthor.setText(add3);
                String add4 = rs.getString("publisher");
                txtPublisher.setText(add4);
            }
         
        } catch (Exception e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);
        }
    }// GEN-LAST:event_txtSearchKeyReleased

    private void btnBorrowActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        try {
           
            String bookid = txtBookID.getText();
            String value1 = txtTitle.getText();
            String value2 = txtAuthor.getText();
            String value3 = txtCategory.getText();
            String value4 = txtPublisher.getText();
            String cusID = txtCusID.getText();

            Calendar cal = new GregorianCalendar();
            cal.add(Calendar.DAY_OF_MONTH, +20);

            java.util.Date in21Days = cal.getTime();

            DateFormat df21d = new SimpleDateFormat("MM/dd/yyyy");

            String expiryDate = df21d.format(in21Days);

            if (cusID.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please input the borrower's ID!");
            } else if (!isNum(cusID)) {
                JOptionPane.showMessageDialog(null, "Please input a number!");
            } else if (numBorrowed(cusID) == 5) {
                JOptionPane.showMessageDialog(null, "This  user has borrowed 5 books!");
            } else if (bookid.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please choose a book!");
            } else if (db.conn.prepareStatement("select * from record where bookID = " + bookid + " and returnDate = ''").executeQuery().next()) {
                JOptionPane.showMessageDialog(null, "This book has been borrowed!");
            } else {

                String sql = "update Book set bookStatus = 'borrowed out' where bookID = '"
                        + bookid + "' ";
                pst = db.conn.prepareStatement(sql);
                pst.executeUpdate();
                // pst.execute();
                JOptionPane.showMessageDialog(null, "Borrowed out successfully");
                pst = db.conn.prepareStatement("select * from record");
                rs = pst.executeQuery();

                // need to take last recordID
                int lastID = 0;
                while (rs.next()) {
                    lastID = Integer.parseInt(rs.getString("recordID"));
                }

                rs.close();

                pst = db.conn.prepareStatement("INSERT INTO record(recordID,userID,bookID,expiryDate,returnDate,Fine,Paid)"
                        + "VALUES(?,?,?,?,?,?,?)");
                pst.setInt(1, lastID + 1);
                pst.setInt(2, Integer.parseInt(cusID));
                pst.setInt(3, Integer.parseInt(bookid));
                pst.setString(4, expiryDate);
                pst.setString(5, "");
                pst.setString(6, "");
                pst.setString(7, "");
                pst.executeUpdate();

            }
        } catch (HeadlessException | SQLException | NumberFormatException e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);
        }
     

        Update_table();
    }// GEN-LAST:event_btnUpdateActionPerformed

    public String currentDate() {
        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);
        String currentDate = (month + 1) + "/" + day + "/" + year;
        return currentDate;
    }

    private void comboBox1PopupMenuWillBecomeInvisible(
            javax.swing.event.PopupMenuEvent evt) {// GEN-FIRST:event_comboBox1PopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        String tmp = (String) comboBox1.getSelectedItem();
        String sql = "select * from Book where bookID = ?";
        try {
           
            pst = db.conn.prepareStatement(sql);
            pst.setString(1, tmp);
            rs = pst.executeQuery();
            if (rs.next()) {
                String add0 = rs.getString("bookID");
                txtBookID.setText(add0);
                String add1 = rs.getString("title");
                txtTitle.setText(add1);
                String add2 = rs.getString("categories");
                txtCategory.setText(add2);
                String add3 = rs.getString("author");
                txtAuthor.setText(add3);
                String add4 = rs.getString("publisher");
                txtPublisher.setText(add4);
            }

        } catch (Exception e) {
            // TODO: handle exception
        }
    }// GEN-LAST:event_comboBox1PopupMenuWillBecomeInvisible

    private void table_BookInfoMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_table_BookInfoMouseClicked
        // TODO add your handling code here:
        try {
       
            int row = table_BookInfo.getSelectedRow();
            String table_click = (table_BookInfo.getModel().getValueAt(row, 0)
                    .toString());
            String sql = "select * from Book where bookID=' " + table_click
                    + " ' ";
            pst = db.conn.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                String add1 = rs.getString("bookID");
                txtBookID.setText(add1);
                String add2 = rs.getString("author");
                txtAuthor.setText(add1);
                String add3 = rs.getString("categories");
                txtCategory.setText(add3);
                String add4 = rs.getString("publisher");
                txtPublisher.setText(add4);
                String add5 = rs.getString("title");
                txtTitle.setText(add5);
            }

        
        } catch (Exception e) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, e);
        }
    }// GEN-LAST:event_table_BookInfoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
		/*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase
         * /tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookGUI_ForReceptionist.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookGUI_ForReceptionist.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookGUI_ForReceptionist.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookGUI_ForReceptionist.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookGUI_ForReceptionist().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBorrow;
    private javax.swing.JButton btnLost;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnTakeFine;
    private javax.swing.JComboBox comboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_BookInfo;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtCusID;
    private javax.swing.JTextField txtPublisher;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTitle;
    private javax.swing.JTextField txtborrowerID;
    // End of variables declaration//GEN-END:variables

}
